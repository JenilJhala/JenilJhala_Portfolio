// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmallUsedCars_WebApp.Database;

#nullable disable

namespace SmallUsedCars_WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentDate = new DateTime(2025, 3, 14, 16, 22, 36, 492, DateTimeKind.Local).AddTicks(7902),
                            AppointmentType = "Service",
                            CustomerId = 1,
                            Description = "Oil Change",
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            Status = "Completed",
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            City = "Toronto",
                            Email = "jenil.rashmi@gmail.com",
                            FirstName = "David",
                            LastName = "Johnson",
                            PhoneNumber = "573-486-7190",
                            PostalCode = "M5H1B6",
                            Province = "Ontario",
                            Street = "Queen St",
                            UnitNumber = "10A"
                        },
                        new
                        {
                            CustomerId = 2,
                            City = "Vancouver",
                            Email = "michael@email.com",
                            FirstName = "Michael",
                            LastName = "Jackson",
                            PhoneNumber = "942-654-3210",
                            PostalCode = "V5R5H6",
                            Province = "British Columbia",
                            Street = "Kingsway",
                            UnitNumber = "5B"
                        });
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CurrentPositionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HRId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalesRecordId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            AccessFailedCount = 0,
                            AppointmentId = 0,
                            ConcurrencyStamp = "c1a7a089-2818-461b-9fdb-e12928d294f0",
                            ContactNumber = "541-222-3574",
                            CurrentPositionStartDate = new DateTime(2023, 3, 19, 16, 22, 36, 2, DateTimeKind.Local).AddTicks(9395),
                            Department = "Sales",
                            Email = "matt@example.com",
                            EmailConfirmed = true,
                            EmployeeName = "Matt Smith",
                            HRId = 0,
                            HireDate = new DateTime(2015, 3, 19, 16, 22, 36, 2, DateTimeKind.Local).AddTicks(9267),
                            LockoutEnabled = false,
                            NormalizedEmail = "MATT@EXAMPLE.COM",
                            NormalizedUserName = "MATTSMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEGx8lJDpRayovoTEPWVkKVecIg6OQ/FSgai7cXClmobguBdJVPZ3epMjEOmbDDNtBQ==",
                            PhoneNumberConfirmed = false,
                            Position = "Manager",
                            SalesRecordId = 0,
                            SecurityStamp = "3fea383e-6587-4846-be9c-f9873889555d",
                            TwoFactorEnabled = false,
                            UserName = "mattsmith"
                        },
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440000",
                            AccessFailedCount = 0,
                            AppointmentId = 0,
                            ConcurrencyStamp = "142ad1da-dab8-4f8d-9547-61013494568f",
                            ContactNumber = "288-433-4432",
                            CurrentPositionStartDate = new DateTime(2020, 3, 19, 16, 22, 36, 187, DateTimeKind.Local).AddTicks(9802),
                            Department = "Sales",
                            Email = "angelina@example.com",
                            EmailConfirmed = true,
                            EmployeeName = "Angelina Jones",
                            HRId = 0,
                            HireDate = new DateTime(2020, 3, 19, 16, 22, 36, 187, DateTimeKind.Local).AddTicks(9524),
                            LockoutEnabled = false,
                            NormalizedEmail = "ANGELINA@EXAMPLE.COM",
                            NormalizedUserName = "ANGELINAJ",
                            PasswordHash = "AQAAAAIAAYagAAAAEPolkeO12YrQNh+6InL+uOt/JhMcYTlX50yjr3yYjSBxT2Y1hSb/NjmAxiJsoOjNKQ==",
                            PhoneNumberConfirmed = false,
                            Position = "Salesperson",
                            SalesRecordId = 0,
                            SecurityStamp = "fdd70beb-835e-4268-91cd-cb6c044ac8b1",
                            TwoFactorEnabled = false,
                            UserName = "angelinaj"
                        },
                        new
                        {
                            Id = "768e2a71-58f1-4d44-9a61-1e41b0972b5a",
                            AccessFailedCount = 0,
                            AppointmentId = 0,
                            ConcurrencyStamp = "1cec2260-e19b-4bbc-b95e-f19e2642c593",
                            ContactNumber = "647-872-9432",
                            CurrentPositionStartDate = new DateTime(2023, 3, 19, 16, 22, 36, 317, DateTimeKind.Local).AddTicks(7323),
                            Department = "Maintenance",
                            Email = "sarah@example.com",
                            EmailConfirmed = true,
                            EmployeeName = "Sarah Connor",
                            HRId = 0,
                            HireDate = new DateTime(2022, 3, 19, 16, 22, 36, 317, DateTimeKind.Local).AddTicks(7129),
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH@EXAMPLE.COM",
                            NormalizedUserName = "SARAHCONNOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEKK+Jf0tig4LbzXGf2eIU5+XzECk1gk9KAJw1G2OW0zHfPrcu1r1zYnxVLSlW05cmQ==",
                            PhoneNumberConfirmed = false,
                            Position = "Technician",
                            SalesRecordId = 0,
                            SecurityStamp = "5977aee8-7560-4045-b47c-231ea3f89aaa",
                            TwoFactorEnabled = false,
                            UserName = "sarahconnor"
                        },
                        new
                        {
                            Id = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            AccessFailedCount = 0,
                            AppointmentId = 0,
                            ConcurrencyStamp = "f0fcce0b-b227-41b0-bb6d-1439ea59c81c",
                            ContactNumber = "403-555-7832",
                            CurrentPositionStartDate = new DateTime(2021, 3, 19, 16, 22, 36, 410, DateTimeKind.Local).AddTicks(2570),
                            Department = "Finance",
                            Email = "james@example.com",
                            EmailConfirmed = true,
                            EmployeeName = "James Roberts",
                            HRId = 0,
                            HireDate = new DateTime(2019, 3, 19, 16, 22, 36, 410, DateTimeKind.Local).AddTicks(2501),
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES@EXAMPLE.COM",
                            NormalizedUserName = "JAMESROBERTS",
                            PasswordHash = "AQAAAAIAAYagAAAAEGvbwFOryIAZnzSJx9Y8hFi2CBraabUf95+EGdg0pbMcBN178G39RxpnUzE1I1vMxg==",
                            PhoneNumberConfirmed = false,
                            Position = "Finance Manager",
                            SalesRecordId = 0,
                            SecurityStamp = "846b8f5e-61f2-4508-a75f-2da51a9e5ced",
                            TwoFactorEnabled = false,
                            UserName = "jamesroberts"
                        });
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.HR", b =>
                {
                    b.Property<int>("HRId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HRId"));

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LeaveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LeaveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaveStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HRId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("HRs");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StockInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StockOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.PayrollRecord", b =>
                {
                    b.Property<int>("PayrollRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayrollRecordId"));

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SalesRecordId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPay")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PayrollRecordId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PayrollRecords");

                    b.HasData(
                        new
                        {
                            PayrollRecordId = -1,
                            BaseSalary = 4500m,
                            Commission = 0m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PayDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 405m,
                            TaxRate = 0m,
                            TotalBeforeTax = 4500m,
                            TotalPay = 4095m
                        },
                        new
                        {
                            PayrollRecordId = -2,
                            BaseSalary = 4700m,
                            Commission = 0m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PayDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 423m,
                            TaxRate = 0m,
                            TotalBeforeTax = 4700m,
                            TotalPay = 4277m
                        },
                        new
                        {
                            PayrollRecordId = -3,
                            BaseSalary = 4900m,
                            Commission = 0m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PayDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 441m,
                            TaxRate = 0m,
                            TotalBeforeTax = 4900m,
                            TotalPay = 4459m
                        },
                        new
                        {
                            PayrollRecordId = -4,
                            BaseSalary = 5150m,
                            Commission = 0m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PayDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 464m,
                            TaxRate = 0m,
                            TotalBeforeTax = 5150m,
                            TotalPay = 4686m
                        },
                        new
                        {
                            PayrollRecordId = -5,
                            BaseSalary = 5400m,
                            Commission = 0m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PayDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 486m,
                            TaxRate = 0m,
                            TotalBeforeTax = 5400m,
                            TotalPay = 4914m
                        },
                        new
                        {
                            PayrollRecordId = -6,
                            BaseSalary = 5600m,
                            Commission = 0m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PayDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 504m,
                            TaxRate = 0m,
                            TotalBeforeTax = 5600m,
                            TotalPay = 5096m
                        },
                        new
                        {
                            PayrollRecordId = -7,
                            BaseSalary = 5800m,
                            Commission = 0m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PayDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 522m,
                            TaxRate = 0m,
                            TotalBeforeTax = 5800m,
                            TotalPay = 5278m
                        },
                        new
                        {
                            PayrollRecordId = -8,
                            BaseSalary = 6000m,
                            Commission = 0m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PayDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 540m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6000m,
                            TotalPay = 5460m
                        },
                        new
                        {
                            PayrollRecordId = -9,
                            BaseSalary = 6200m,
                            Commission = 0m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PayDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 558m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6200m,
                            TotalPay = 5642m
                        },
                        new
                        {
                            PayrollRecordId = -10,
                            BaseSalary = 5000m,
                            Commission = 0m,
                            EmployeeId = "550e8400-e29b-41d4-a716-446655440000",
                            PayDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 450m,
                            TaxRate = 0m,
                            TotalBeforeTax = 5000m,
                            TotalPay = 4550m
                        },
                        new
                        {
                            PayrollRecordId = -11,
                            BaseSalary = 5250m,
                            Commission = 0m,
                            EmployeeId = "550e8400-e29b-41d4-a716-446655440000",
                            PayDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 473m,
                            TaxRate = 0m,
                            TotalBeforeTax = 5250m,
                            TotalPay = 4777m
                        },
                        new
                        {
                            PayrollRecordId = -12,
                            BaseSalary = 5500m,
                            Commission = 0m,
                            EmployeeId = "550e8400-e29b-41d4-a716-446655440000",
                            PayDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 495m,
                            TaxRate = 0m,
                            TotalBeforeTax = 5500m,
                            TotalPay = 5005m
                        },
                        new
                        {
                            PayrollRecordId = -13,
                            BaseSalary = 5800m,
                            Commission = 0m,
                            EmployeeId = "550e8400-e29b-41d4-a716-446655440000",
                            PayDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 522m,
                            TaxRate = 0m,
                            TotalBeforeTax = 5800m,
                            TotalPay = 5278m
                        },
                        new
                        {
                            PayrollRecordId = -14,
                            BaseSalary = 6000m,
                            Commission = 0m,
                            EmployeeId = "550e8400-e29b-41d4-a716-446655440000",
                            PayDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 540m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6000m,
                            TotalPay = 5460m
                        },
                        new
                        {
                            PayrollRecordId = -15,
                            BaseSalary = 6300m,
                            Commission = 0m,
                            EmployeeId = "550e8400-e29b-41d4-a716-446655440000",
                            PayDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 567m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6300m,
                            TotalPay = 5733m
                        },
                        new
                        {
                            PayrollRecordId = -16,
                            BaseSalary = 6500m,
                            Commission = 0m,
                            EmployeeId = "550e8400-e29b-41d4-a716-446655440000",
                            PayDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 585m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6500m,
                            TotalPay = 5915m
                        },
                        new
                        {
                            PayrollRecordId = -17,
                            BaseSalary = 6700m,
                            Commission = 0m,
                            EmployeeId = "550e8400-e29b-41d4-a716-446655440000",
                            PayDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 603m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6700m,
                            TotalPay = 6097m
                        },
                        new
                        {
                            PayrollRecordId = -24,
                            BaseSalary = 5800m,
                            Commission = 0m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            PayDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 522m,
                            TaxRate = 0m,
                            TotalBeforeTax = 5800m,
                            TotalPay = 5278m
                        },
                        new
                        {
                            PayrollRecordId = -25,
                            BaseSalary = 6100m,
                            Commission = 0m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            PayDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 549m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6100m,
                            TotalPay = 5551m
                        },
                        new
                        {
                            PayrollRecordId = -26,
                            BaseSalary = 6300m,
                            Commission = 0m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            PayDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 567m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6300m,
                            TotalPay = 5733m
                        },
                        new
                        {
                            PayrollRecordId = -27,
                            BaseSalary = 6500m,
                            Commission = 0m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            PayDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 585m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6500m,
                            TotalPay = 5915m
                        },
                        new
                        {
                            PayrollRecordId = -28,
                            BaseSalary = 6700m,
                            Commission = 0m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            PayDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 603m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6700m,
                            TotalPay = 6097m
                        },
                        new
                        {
                            PayrollRecordId = -34,
                            BaseSalary = 5800m,
                            Commission = 0m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            PayDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 522m,
                            TaxRate = 0m,
                            TotalBeforeTax = 5800m,
                            TotalPay = 5278m
                        },
                        new
                        {
                            PayrollRecordId = -35,
                            BaseSalary = 6100m,
                            Commission = 0m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            PayDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 549m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6100m,
                            TotalPay = 5551m
                        },
                        new
                        {
                            PayrollRecordId = -36,
                            BaseSalary = 6300m,
                            Commission = 0m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            PayDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 567m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6300m,
                            TotalPay = 5733m
                        },
                        new
                        {
                            PayrollRecordId = -37,
                            BaseSalary = 6500m,
                            Commission = 0m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            PayDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 585m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6500m,
                            TotalPay = 5915m
                        },
                        new
                        {
                            PayrollRecordId = -38,
                            BaseSalary = 6700m,
                            Commission = 0m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            PayDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 603m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6700m,
                            TotalPay = 6097m
                        },
                        new
                        {
                            PayrollRecordId = -39,
                            BaseSalary = 6900m,
                            Commission = 0m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            PayDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 621m,
                            TaxRate = 0m,
                            TotalBeforeTax = 6900m,
                            TotalPay = 6279m
                        },
                        new
                        {
                            PayrollRecordId = -40,
                            BaseSalary = 7100m,
                            Commission = 0m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            PayDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 639m,
                            TaxRate = 0m,
                            TotalBeforeTax = 7100m,
                            TotalPay = 6461m
                        },
                        new
                        {
                            PayrollRecordId = 1,
                            BaseSalary = 5000m,
                            Commission = 0m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PayDate = new DateTime(2025, 2, 19, 16, 22, 36, 492, DateTimeKind.Local).AddTicks(7973),
                            SalePrice = 0m,
                            SalesRecordId = 0,
                            Tax = 500m,
                            TaxRate = 0m,
                            TotalBeforeTax = 5500m,
                            TotalPay = 5000m
                        });
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.SalesRecord", b =>
                {
                    b.Property<int>("SalesRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesRecordId"));

                    b.Property<decimal>("CommissionEarned")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PayrollRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("SalesRecordId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollRecordId");

                    b.HasIndex("VehicleId");

                    b.ToTable("SalesRecords");

                    b.HasData(
                        new
                        {
                            SalesRecordId = -1,
                            CommissionEarned = 0m,
                            CommissionRate = 0.05m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            SaleDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 1200m,
                            VehicleId = 1
                        },
                        new
                        {
                            SalesRecordId = -2,
                            CommissionEarned = 0m,
                            CommissionRate = 0.05m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            SaleDate = new DateTime(2024, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 2500m,
                            VehicleId = 2
                        },
                        new
                        {
                            SalesRecordId = -11,
                            CommissionEarned = 0m,
                            CommissionRate = 0.05m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            SaleDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 3000m,
                            VehicleId = 11
                        },
                        new
                        {
                            SalesRecordId = -3,
                            CommissionEarned = 0m,
                            CommissionRate = 0.05m,
                            EmployeeId = "550e8400-e29b-41d4-a716-446655440000",
                            SaleDate = new DateTime(2024, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 1000m,
                            VehicleId = 3
                        },
                        new
                        {
                            SalesRecordId = -4,
                            CommissionEarned = 0m,
                            CommissionRate = 0.05m,
                            EmployeeId = "550e8400-e29b-41d4-a716-446655440000",
                            SaleDate = new DateTime(2024, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 900m,
                            VehicleId = 4
                        },
                        new
                        {
                            SalesRecordId = -5,
                            CommissionEarned = 0m,
                            CommissionRate = 0.05m,
                            EmployeeId = "550e8400-e29b-41d4-a716-446655440000",
                            SaleDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 1700m,
                            VehicleId = 5
                        },
                        new
                        {
                            SalesRecordId = -6,
                            CommissionEarned = 0m,
                            CommissionRate = 0.05m,
                            EmployeeId = "768e2a71-58f1-4d44-9a61-1e41b0972b5a",
                            SaleDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 2000m,
                            VehicleId = 6
                        },
                        new
                        {
                            SalesRecordId = -7,
                            CommissionEarned = 0m,
                            CommissionRate = 0.05m,
                            EmployeeId = "768e2a71-58f1-4d44-9a61-1e41b0972b5a",
                            SaleDate = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 2550m,
                            VehicleId = 7
                        },
                        new
                        {
                            SalesRecordId = -8,
                            CommissionEarned = 0m,
                            CommissionRate = 0.05m,
                            EmployeeId = "768e2a71-58f1-4d44-9a61-1e41b0972b5a",
                            SaleDate = new DateTime(2024, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 2850m,
                            VehicleId = 8
                        },
                        new
                        {
                            SalesRecordId = -9,
                            CommissionEarned = 0m,
                            CommissionRate = 0.05m,
                            EmployeeId = "768e2a71-58f1-4d44-9a61-1e41b0972b5a",
                            SaleDate = new DateTime(2025, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 2570m,
                            VehicleId = 9
                        },
                        new
                        {
                            SalesRecordId = -10,
                            CommissionEarned = 0m,
                            CommissionRate = 0.05m,
                            EmployeeId = "dff31e3b-123a-48f9-942b-4d1b34a14e1c",
                            SaleDate = new DateTime(2024, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalePrice = 3000m,
                            VehicleId = 10
                        },
                        new
                        {
                            SalesRecordId = 1,
                            CommissionEarned = 1100m,
                            CommissionRate = 0.05m,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            SaleDate = new DateTime(2025, 2, 17, 16, 22, 36, 492, DateTimeKind.Local).AddTicks(7944),
                            SalePrice = 22000m,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Mileage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Powertrain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            CustomerId = 1,
                            ImageFileName = "2022Accord.jpg",
                            Manufacturer = "Honda",
                            MarketValue = 22000m,
                            Mileage = "48000km",
                            Model = "Accord",
                            PlateNumber = "ABC123",
                            Powertrain = "Gasoline",
                            Status = "Available",
                            Type = "Sedan",
                            Vin = "1HGCM82633A123456",
                            Year = 2022
                        },
                        new
                        {
                            VehicleId = 2,
                            CustomerId = 2,
                            ImageFileName = "2023CR-V.jpg",
                            Manufacturer = "Honda",
                            MarketValue = 28000m,
                            Mileage = "2500km",
                            Model = "CR-V",
                            PlateNumber = "XYZ789",
                            Powertrain = "Hybrid",
                            Status = "Available",
                            Type = "SUV",
                            Vin = "2HGFA16548H123456",
                            Year = 2023
                        },
                        new
                        {
                            VehicleId = 3,
                            CustomerId = 1,
                            ImageFileName = "2016Focus.jpg",
                            Manufacturer = "Ford",
                            MarketValue = 20000m,
                            Mileage = "52000km",
                            Model = "Focus",
                            PlateNumber = "DEF456",
                            Powertrain = "Gasoline",
                            Status = "Sold",
                            Type = "Hatchback",
                            Vin = "3FADP4BJ2KM123456",
                            Year = 2016
                        },
                        new
                        {
                            VehicleId = 4,
                            CustomerId = 2,
                            ImageFileName = "2020Camry.jpg",
                            Manufacturer = "Toyota",
                            MarketValue = 25000m,
                            Mileage = "33000km",
                            Model = "Camry",
                            PlateNumber = "GHI789",
                            Powertrain = "Hybrid",
                            Status = "Available",
                            Type = "Sedan",
                            Vin = "4T1BF1FK1HU123456",
                            Year = 2020
                        },
                        new
                        {
                            VehicleId = 5,
                            CustomerId = 1,
                            ImageFileName = "2023Model3.jpg",
                            Manufacturer = "Tesla",
                            MarketValue = 35000m,
                            Mileage = "7000km",
                            Model = "Model 3",
                            PlateNumber = "JKL012",
                            Powertrain = "Electric",
                            Status = "Available",
                            Type = "Sedan",
                            Vin = "5YJ3E1EA7LF123456",
                            Year = 2023
                        },
                        new
                        {
                            VehicleId = 6,
                            CustomerId = 2,
                            ImageFileName = "2022Explorer.jpg",
                            Manufacturer = "Ford",
                            MarketValue = 26500m,
                            Mileage = "59300km",
                            Model = "Explorer",
                            PlateNumber = "LMN456",
                            Powertrain = "Gasoline",
                            Status = "Sold",
                            Type = "SUV",
                            Vin = "JH4KA8260NC983245",
                            Year = 2022
                        },
                        new
                        {
                            VehicleId = 7,
                            CustomerId = 1,
                            ImageFileName = "2023Silverado.jpg",
                            Manufacturer = "Chevrolet",
                            MarketValue = 37000m,
                            Mileage = "11000km",
                            Model = "Silverado",
                            PlateNumber = "QWE789",
                            Powertrain = "Diesel",
                            Status = "Under Repair",
                            Type = "Truck",
                            Vin = "3GCUKREC1JG491275",
                            Year = 2023
                        },
                        new
                        {
                            VehicleId = 8,
                            CustomerId = 2,
                            ImageFileName = "2021X5.jpg",
                            Manufacturer = "BMW",
                            MarketValue = 39000m,
                            Mileage = "26400km",
                            Model = "X5",
                            PlateNumber = "RTY852",
                            Powertrain = "Hybrid",
                            Status = "Available",
                            Type = "SUV",
                            Vin = "WBXHT3C36J5F81234",
                            Year = 2021
                        },
                        new
                        {
                            VehicleId = 9,
                            CustomerId = 1,
                            ImageFileName = "2023Altima.jpg",
                            Manufacturer = "Nissan",
                            MarketValue = 19500m,
                            Mileage = "42000km",
                            Model = "Altima",
                            PlateNumber = "UIO369",
                            Powertrain = "Gasoline",
                            Status = "Available",
                            Type = "Sedan",
                            Vin = "JN1CV6EL7MM975312",
                            Year = 2023
                        },
                        new
                        {
                            VehicleId = 10,
                            CustomerId = 2,
                            ImageFileName = "2024Sonata.jpg",
                            Manufacturer = "Hyundai",
                            MarketValue = 22000m,
                            Mileage = "1000km",
                            Model = "Sonata",
                            PlateNumber = "PAS741",
                            Powertrain = "Hybrid",
                            Status = "Available",
                            Type = "Sedan",
                            Vin = "KMHDH4AE3EU653948",
                            Year = 2024
                        },
                        new
                        {
                            VehicleId = 11,
                            CustomerId = 1,
                            ImageFileName = "2022Sportage.jpg",
                            Manufacturer = "Kia",
                            MarketValue = 28500m,
                            Mileage = "2000km",
                            Model = "Sportage",
                            PlateNumber = "GHJ654",
                            Powertrain = "Electric",
                            Status = "Available",
                            Type = "SUV",
                            Vin = "KNDPM3AC2H7128394",
                            Year = 2022
                        });
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.VehicleMaintenance", b =>
                {
                    b.Property<int>("VehicleMaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleMaintenanceId"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaintenanceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("VehicleMaintenanceId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceRecords");

                    b.HasData(
                        new
                        {
                            VehicleMaintenanceId = 1,
                            Cost = 50m,
                            LastServiceDate = new DateTime(2024, 3, 19, 16, 22, 36, 492, DateTimeKind.Local).AddTicks(7685),
                            MaintenanceDescription = "Routine oil change",
                            MaintenanceType = "Oil Change",
                            TaxAmount = 5m,
                            TotalAmount = 55m,
                            VehicleId = 1
                        },
                        new
                        {
                            VehicleMaintenanceId = 2,
                            Cost = 200m,
                            LastServiceDate = new DateTime(2023, 3, 19, 16, 22, 36, 492, DateTimeKind.Local).AddTicks(7758),
                            MaintenanceDescription = "Replaced worn-out brake pads",
                            MaintenanceType = "Brake Pad Replacement",
                            TaxAmount = 20m,
                            TotalAmount = 220m,
                            VehicleId = 1
                        },
                        new
                        {
                            VehicleMaintenanceId = 3,
                            Cost = 40m,
                            LastServiceDate = new DateTime(2025, 2, 2, 16, 22, 36, 492, DateTimeKind.Local).AddTicks(7783),
                            MaintenanceDescription = "Routine tire rotation for even wear",
                            MaintenanceType = "Tire Rotation",
                            TaxAmount = 4m,
                            TotalAmount = 44m,
                            VehicleId = 2
                        },
                        new
                        {
                            VehicleMaintenanceId = 4,
                            Cost = 150m,
                            LastServiceDate = new DateTime(2020, 3, 19, 16, 22, 36, 492, DateTimeKind.Local).AddTicks(7790),
                            MaintenanceDescription = "Replaced old car battery",
                            MaintenanceType = "Battery Replacement",
                            TaxAmount = 15m,
                            TotalAmount = 165m,
                            VehicleId = 2
                        },
                        new
                        {
                            VehicleMaintenanceId = 5,
                            Cost = 300m,
                            LastServiceDate = new DateTime(2024, 12, 19, 16, 22, 36, 492, DateTimeKind.Local).AddTicks(7794),
                            MaintenanceDescription = "Complete engine diagnostic and tune-up",
                            MaintenanceType = "Engine Tune-Up",
                            TaxAmount = 30m,
                            TotalAmount = 330m,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.VehicleMaintenanceAlert", b =>
                {
                    b.Property<int>("VehicleMaintenanceAlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleMaintenanceAlertId"));

                    b.Property<DateTime>("AlertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("VehicleMaintenanceAlertId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceAlerts");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.VehicleTransaction", b =>
                {
                    b.Property<int>("VehicleTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleTransactionId"));

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MarginRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TradeInValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("VehicleTransactionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleTransactions");

                    b.HasData(
                        new
                        {
                            VehicleTransactionId = 1,
                            EmployeeId = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            FinalPrice = 26000m,
                            MarginRate = 5.5m,
                            PurchasePrice = 20000m,
                            SalesPrice = 26000m,
                            TradeInValue = 3000m,
                            TransactionDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionType = "Sell",
                            VehicleId = 1
                        },
                        new
                        {
                            VehicleTransactionId = 2,
                            EmployeeId = "768e2a71-58f1-4d44-9a61-1e41b0972b5a",
                            FinalPrice = 22500m,
                            MarginRate = 4.8m,
                            PurchasePrice = 18000m,
                            SalesPrice = 22500m,
                            TradeInValue = 2500m,
                            TransactionDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionType = "Buy",
                            VehicleId = 2
                        },
                        new
                        {
                            VehicleTransactionId = 3,
                            EmployeeId = "550e8400-e29b-41d4-a716-446655440000",
                            FinalPrice = 36000m,
                            MarginRate = 6.2m,
                            PurchasePrice = 28000m,
                            SalesPrice = 36000m,
                            TradeInValue = 5000m,
                            TransactionDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionType = "TradeIn",
                            VehicleId = 4
                        },
                        new
                        {
                            VehicleTransactionId = 4,
                            EmployeeId = "768e2a71-58f1-4d44-9a61-1e41b0972b5a",
                            FinalPrice = 56000m,
                            MarginRate = 5.8m,
                            PurchasePrice = 47000m,
                            SalesPrice = 56000m,
                            TradeInValue = 6000m,
                            TransactionDate = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionType = "Sell",
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmallUsedCars_WebApp.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmallUsedCars_WebApp.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallUsedCars_WebApp.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmallUsedCars_WebApp.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.Appointment", b =>
                {
                    b.HasOne("SmallUsedCars_WebApp.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallUsedCars_WebApp.Entities.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmallUsedCars_WebApp.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.HR", b =>
                {
                    b.HasOne("SmallUsedCars_WebApp.Entities.Employee", "Employee")
                        .WithMany("HRRecords")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.Inventory", b =>
                {
                    b.HasOne("SmallUsedCars_WebApp.Entities.Vehicle", "Vehicle")
                        .WithOne("Inventory")
                        .HasForeignKey("SmallUsedCars_WebApp.Entities.Inventory", "VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.PayrollRecord", b =>
                {
                    b.HasOne("SmallUsedCars_WebApp.Entities.Employee", "Employee")
                        .WithMany("PayrollRecords")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.SalesRecord", b =>
                {
                    b.HasOne("SmallUsedCars_WebApp.Entities.Employee", "Employee")
                        .WithMany("SalesRecords")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SmallUsedCars_WebApp.Entities.PayrollRecord", null)
                        .WithMany("SalesRecords")
                        .HasForeignKey("PayrollRecordId");

                    b.HasOne("SmallUsedCars_WebApp.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.Vehicle", b =>
                {
                    b.HasOne("SmallUsedCars_WebApp.Entities.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.VehicleMaintenance", b =>
                {
                    b.HasOne("SmallUsedCars_WebApp.Entities.Vehicle", "Vehicle")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.VehicleMaintenanceAlert", b =>
                {
                    b.HasOne("SmallUsedCars_WebApp.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.VehicleTransaction", b =>
                {
                    b.HasOne("SmallUsedCars_WebApp.Entities.Employee", "Employee")
                        .WithMany("VehicleTransactions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmallUsedCars_WebApp.Entities.Vehicle", "Vehicle")
                        .WithMany("Transactions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HRRecords");

                    b.Navigation("PayrollRecords");

                    b.Navigation("SalesRecords");

                    b.Navigation("VehicleTransactions");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.PayrollRecord", b =>
                {
                    b.Navigation("SalesRecords");
                });

            modelBuilder.Entity("SmallUsedCars_WebApp.Entities.Vehicle", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
